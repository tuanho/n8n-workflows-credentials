{
  "createdAt": "2025-05-23T19:47:11.784Z",
  "updatedAt": "2025-05-28T15:37:03.000Z",
  "id": "8YKlc9Yvl8G0sLzX",
  "name": "WebScrapper",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -3600,
        470
      ],
      "id": "f0c05767-5e01-4e64-890a-12ae6635391a",
      "name": "When chat message received",
      "webhookId": "01600a51-c3cf-4a4f-9059-697be236ed69"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "aa9156b4-7556-4229-938b-38e0d9391015",
              "leftValue": "={{ $json.data }}",
              "rightValue": "sitemap",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2784,
        470
      ],
      "id": "e64a9871-6961-4852-b260-0de39920cd5c",
      "name": "If sitemap exists"
    },
    {
      "parameters": {
        "url": "={{ $json.message.content.baseUrl }}/robots.txt",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3004,
        470
      ],
      "id": "e3da0258-14e4-4ee0-9f5c-6074876e979a",
      "name": "Check robots",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b9a4d5b0-2385-49cd-9228-df1c56284cf1",
              "leftValue": "={{ $json.message.content.pathway }}",
              "rightValue": "url",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1372,
        470
      ],
      "id": "853d7e1b-9886-4ee7-9e54-88792c5965b4",
      "name": "If"
    },
    {
      "parameters": {
        "url": "={{ $('Extract base URL').item.json.message.content.baseUrl }}/sitemap.xml",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2564,
        120
      ],
      "id": "cd9d10ea-dd18-4a26-a275-5f2c23c2135d",
      "name": "sitemap.xml",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "={{ $('Extract base URL').item.json.message.content.baseUrl }}/sitemap_index.xml",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2564,
        320
      ],
      "id": "2d677f77-d59f-4c2e-bcc4-4fd934af9c4a",
      "name": "sitemap_index.xml",
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "={{ $('Extract base URL').item.json.message.content.baseUrl }}/site-map.xml",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2564,
        620
      ],
      "id": "c5d23b8a-5461-4b48-a664-441c25a0a251",
      "name": "site-map.xml",
      "executeOnce": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "={{ $('Extract base URL').item.json.message.content.baseUrl }}/sitemap.json",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2564,
        820
      ],
      "id": "cfcc56fc-5070-49a4-8dd5-f8acd375d1cf",
      "name": "sitemap.json",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=extract each of the seperate loc elements and return a JSON object as below, make sure that the first key value pair identifies if the pathways are regular urls or xml:\n\n{\n\"pathway\": \"xml\"\n\"loc1\":\"example1.com.xml\",\n\"loc2\":\"example2.com.xml\",\n\"loc3\":\"example3.com.xml\"\n}\n\nor\n\n\n{\n\"pathway\": \"url\"\n\"loc1\":\"example1.com\",\n\"loc2\":\"example2.com\",\n\"loc3\":\"example3.com\"\n}\n",
              "role": "system"
            },
            {
              "content": "={{ $json.data }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -1748,
        470
      ],
      "id": "aa20302c-3ba6-4cb4-805d-5b978acda2eb",
      "name": "Check for XML or URL",
      "credentials": {
        "openAiApi": {
          "id": "tZHVT6xgANDw48fc",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a URL normalization assistant. Your task is to convert any input URL into its **standard base URL format** and return the result as JSON.\n\nNormalization Rules:\n1. Ensure the URL starts with `https://` (add it if missing).\n2. Remove `www.` unless it is critical for the domain's identity.\n3. Remove everything after the domain (paths, query strings, fragments).\n4. Preserve subdomains (e.g., `blog.example.com` â†’ `https://blog.example.com`).\n5. Convert the domain part to lowercase.\n6. Output the result in JSON format as:\n   {\n     \"baseUrl\": \"https://example.com\"\n   }\n\nExamples:\nInput: `n8n.io/path/page`\nOutput: `{ \"baseUrl\": \"https://n8n.io\" }`\n\nInput: `http://www.Example.COM/query=1`\nOutput: `{ \"baseUrl\": \"https://example.com\" }`\n\nReturn **only the JSON object** in the output. No additional text or explanations.\n",
              "role": "system"
            },
            {
              "content": "={{ $json.chatInput }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -3380,
        470
      ],
      "id": "240779b7-4206-410e-81f2-81f5a059779c",
      "name": "Extract base URL",
      "credentials": {
        "openAiApi": {
          "id": "tZHVT6xgANDw48fc",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "output the sitemap value in json format of this structure:\n\n{\"sitemap\":\"www.example.com/sitemap.xml:}\n\nNote, only output one single sitemap value. If there are multiple, make the best choice on which is the correct one to use",
              "role": "system"
            },
            {
              "content": "={{ $json.data }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -2344,
        470
      ],
      "id": "37261472-2195-4a4d-94f9-387d8b55273c",
      "name": "Get sidemap",
      "credentials": {
        "openAiApi": {
          "id": "tZHVT6xgANDw48fc",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.message.content.sitemap }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1968,
        470
      ],
      "id": "1a77b56b-2112-4beb-bd04-a724a4512b7c",
      "name": " get sitemap data1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        608,
        690
      ],
      "id": "9076eac9-c708-4b52-9fc4-ab8b945cece8",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "tZHVT6xgANDw48fc",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "ksl_knowledge_base",
          "mode": "list",
          "cachedResultName": "ksl_knowledge_base"
        },
        "embeddingBatchSize": 64,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.1,
      "position": [
        624,
        470
      ],
      "id": "5c719ab5-1a03-40fb-9bff-165fe41e0ae8",
      "name": "Qdrant Vector Store",
      "credentials": {
        "qdrantApi": {
          "id": "by4cZRUMG2dwSSHl",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        728,
        692.5
      ],
      "id": "bdbddd6e-e93c-4c7f-8d3d-a934c70d9d28",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        -712,
        570
      ],
      "id": "7a07ca19-4dad-4e4d-8679-88c2c234fece",
      "name": "XML",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "function extractAllLocs(data) {\n    const locs = [];\n\n    function findLocs(obj) {\n        if (!obj) return;\n\n        // If it's an object, check for loc key and continue recursion\n        if (typeof obj === 'object') {\n            for (const key in obj) {\n                if (key === 'loc' && typeof obj[key] === 'string') {\n                    locs.push(obj[key]);\n                } else {\n                    findLocs(obj[key]);\n                }\n            }\n        }\n        // If it's an array, loop through each item\n        else if (Array.isArray(obj)) {\n            obj.forEach(findLocs);\n        }\n    }\n\n    findLocs(data);\n    return locs.map(url => ({ url }));\n}\n\n// Usage in n8n:\nconst data = $input.first().json.urlset; // Extracting from the urlset\n\nconst urls = extractAllLocs(data);\n\nreturn urls.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -492,
        570
      ],
      "id": "cc44b564-1f9f-483b-b5ff-6ead15257bfc",
      "name": "find URLs"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1
            }
          },
          "allowUnauthorizedCerts": false,
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -272,
        370
      ],
      "id": "6eb08e48-8898-4795-95db-eec14a08f835",
      "name": "GET URLs"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -932,
        570
      ],
      "id": "9084e29c-e98b-4aeb-bce3-ec26c6049d23",
      "name": "GET XML",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const data = $('Check for XML or URL').first().json.message;\n\nconst content = data.content;\n\nconst urls = [];\n\nObject.keys(content).forEach(key => {\n  if (key.startsWith('loc')) {\n    urls.push({ json: { url: content[key] } });\n  }\n});\n\nreturn urls;\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -492,
        370
      ],
      "id": "9f0e7712-a038-42c4-a2e2-baaffcba067f",
      "name": "List all URLS"
    },
    {
      "parameters": {
        "jsCode": "const content = $input.first().json.message.content;\n\n// Extract all `loc1`, `loc2`, etc., into an array\nconst urls = Object.values(content);\n\n// Return each URL as a separate item\nreturn urls.map(url => ({\n  json: { url }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1152,
        570
      ],
      "id": "35789291-0e68-41c0-8d15-eb713ac31ff7",
      "name": "List all the URLS"
    },
    {
      "parameters": {
        "jsCode": "// n8n: Get all input items\nconst items = $input.all();\n\nfunction convertMarkdownToPlainText(markdown) {\n  let plainText = String(markdown);\n  // Remove images\n  plainText = plainText.replace(/!\\[([^\\]]*)\\]\\([^\\)]+\\)/g, '$1');\n  // Remove links\n  plainText = plainText.replace(/\\[([^\\]]+)\\]\\([^\\)]+\\)/g, '$1');\n  // Remove headers\n  plainText = plainText.replace(/^#{1,6}\\s*(.*)$/gm, '$1');\n  // Remove blockquotes\n  plainText = plainText.replace(/^\\s*>+\\s?/gm, '');\n  // Remove inline code\n  plainText = plainText.replace(/`([^`]*)`/g, '$1');\n  // Remove bold and italic\n  plainText = plainText.replace(/\\*\\*|\\*|__|_/g, '');\n  // Remove HTML special chars\n  plainText = plainText.replace(/[<>]/g, '');\n  // Remove bullet points and numbered lists\n  plainText = plainText.replace(/^\\s*[-*+]\\s+/gm, '');\n  plainText = plainText.replace(/^\\s*\\d+\\.\\s+/gm, '');\n  // Remove extra line breaks\n  plainText = plainText.replace(/\\n\\s*\\n/g, '\\n');\n  // Remove all real and escaped newlines (this is the important fix)\n  plainText = plainText.replace(/(\\r\\n|\\r|\\n|\\\\n|\\\\r|\\\\r\\\\n)/g, ' ');\n  // Collapse whitespace\n  plainText = plainText.replace(/\\s{2,}/g, ' ');\n  // Remove all backslashes\n  plainText = plainText.replace(/\\\\/g, '');\n\n  return plainText.trim();\n}\n\nconst output = items.map(item => {\n  let content = (typeof item === 'object' && item !== null)\n    ? (item.data || item.content || item.text || JSON.stringify(item))\n    : String(item);\n\n  const plainText = convertMarkdownToPlainText(content);\n\n  return { json: { text: plainText } };\n});\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        168,
        470
      ],
      "id": "e4fee589-c35f-4aef-bc83-2216fc783b5b",
      "name": "Strip text"
    },
    {
      "parameters": {
        "html": "={{ $json.data }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        -52,
        470
      ],
      "id": "4d76bb95-fbd6-4f20-bbef-5e3f32dd4d35",
      "name": "Markdown",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1
            }
          },
          "allowUnauthorizedCerts": false,
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -272,
        570
      ],
      "id": "edc73610-bfce-411a-ba97-073f81ea251b",
      "name": "GET URLs1"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        388,
        470
      ],
      "id": "e184452a-891a-44a6-bf1b-e22def9394db",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "chunkSize": 350,
        "chunkOverlap": 60,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        816,
        890
      ],
      "id": "3cf447db-a392-4fe6-8452-b87c2fdf6915",
      "name": "Recursive Character Text Splitter"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Extract base URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check robots": {
      "main": [
        [
          {
            "node": "If sitemap exists",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If sitemap exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If sitemap exists": {
      "main": [
        [
          {
            "node": "Get sidemap",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "sitemap.xml",
            "type": "main",
            "index": 0
          },
          {
            "node": "sitemap_index.xml",
            "type": "main",
            "index": 0
          },
          {
            "node": "site-map.xml",
            "type": "main",
            "index": 0
          },
          {
            "node": "sitemap.json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "List all URLS",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "List all the URLS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sitemap.xml": {
      "main": [
        [
          {
            "node": "Get sidemap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sitemap_index.xml": {
      "main": [
        [
          {
            "node": "Get sidemap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "site-map.xml": {
      "main": [
        [
          {
            "node": "Get sidemap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sitemap.json": {
      "main": [
        [
          {
            "node": "Get sidemap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for XML or URL": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract base URL": {
      "main": [
        [
          {
            "node": "Check robots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get sidemap": {
      "main": [
        [
          {
            "node": " get sitemap data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    " get sitemap data1": {
      "main": [
        [
          {
            "node": "Check for XML or URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "XML": {
      "main": [
        [
          {
            "node": "find URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "find URLs": {
      "main": [
        [
          {
            "node": "GET URLs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET URLs": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET XML": {
      "main": [
        [
          {
            "node": "XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List all URLS": {
      "main": [
        [
          {
            "node": "GET URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List all the URLS": {
      "main": [
        [
          {
            "node": "GET XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Strip text": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "Strip text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET URLs1": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Qdrant Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "f4f4f4e4-7e8e-475f-ac2b-b14f2882f785",
  "triggerCount": 0,
  "tags": []
}